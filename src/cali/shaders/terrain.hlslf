#include "cali_common.fx"

/////////////////////////////////////////////////////////////
// Type Definitions
/////////////////////////////////////////////////////////////

struct lightSampleValues
{
	float3 dir;
	float3 L;
};

lightSampleValues computePointLightValues(float3 surfacePosition)
{
    lightSampleValues values;

    float3 lightVec = sun_position - surfacePosition;
	float dist = length(lightVec);

    values.dir = normalize(lightVec);

	// Dot computes the 3-term attenuation in one operation
	// k_c * 1.0 + k_l * dist + k_q * dist * dist

	float distAtten = dot(sun_attenuation,
		float3(1.0, dist, dist*dist));

    values.L = sun_intensity / distAtten;

    return values;
}

/////////////////////////////////////////////////////////////
// Global Resources
/////////////////////////////////////////////////////////////

static const float resolution = 0.01;
static const float far_plane = 100000.0;

/////////////////////////////////////////////////////////////
// Main
/////////////////////////////////////////////////////////////

float4 main(VS_OUTPUT input) : SV_TARGET
{
    lightSampleValues lightValues = computePointLightValues(input.world_position);

    float3 lighting = clamp(dot(normalize(input.normal), lightValues.dir), 0.0, 1.0) * lightValues.L;
    float4 frag_color = float4(lighting.r, lighting.g, lighting.b, 1.0);

    float depth_value = log(resolution * input.screen_position.w + 1) / log(resolution * far_plane + 1);

    frag_color.r = lerp(frag_color.r, 113.f / 255.f, depth_value);
    frag_color.g = lerp(frag_color.g, 149.f / 255.f, depth_value);
    frag_color.b = lerp(frag_color.b, 206.f / 255.f, depth_value);
    
    return frag_color;
}
