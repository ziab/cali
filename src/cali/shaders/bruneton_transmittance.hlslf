#include "cali_common.fx"
#include "bruneton_common.fx"

void GetRMuFromTransmittanceTextureUv(in AtmosphereParameters atmosphere,
    in float2 uv, out Length r, out Number mu)
{
    //assert(uv.x >= 0.0 && uv.x <= 1.0);
    //assert(uv.y >= 0.0 && uv.y <= 1.0);
    Number x_mu = GetUnitRangeFromTextureCoord(uv.x, TRANSMITTANCE_TEXTURE_WIDTH);
    Number x_r = GetUnitRangeFromTextureCoord(uv.y, TRANSMITTANCE_TEXTURE_HEIGHT);
    // Distance to top atmosphere boundary for a horizontal ray at ground level.
    Length H = sqrt(atmosphere.top_radius * atmosphere.top_radius -
        atmosphere.bottom_radius * atmosphere.bottom_radius);
    // Distance to the horizon, from which we can compute r:
    Length rho = H * x_r;
    r = sqrt(rho * rho + atmosphere.bottom_radius * atmosphere.bottom_radius);
    // Distance to the top atmosphere boundary for the ray (r,mu), and its minimum
    // and maximum values over all mu - obtained for (r,1) and (r,mu_horizon) -
    // from which we can recover mu:
    Length d_min = atmosphere.top_radius - r;
    Length d_max = rho + H;
    Length d = d_min + x_mu * (d_max - d_min);
    mu = d == 0.0 * m ? Number(1.0) : (H * H - rho * rho - d * d) / (2.0 * r * d);
    mu = ClampCosine(mu);
}

Length ComputeOpticalLengthToTopAtmosphereBoundary(
    in AtmosphereParameters atmosphere, Length scale_height, Length r, Number mu)
{
    //assert(r >= atmosphere.bottom_radius && r <= atmosphere.top_radius);
    //assert(mu >= -1.0 && mu <= 1.0);
    // Number of intervals for the numerical integration.
    const int SAMPLE_COUNT = 500;
    // The integration step, i.e. the length of each integration interval.
    Length dx = DistanceToTopAtmosphereBoundary(atmosphere, r, mu) / Number(SAMPLE_COUNT);
    // Integration loop.
    Length result = 0.0 * m;
    for (int i = 0; i <= SAMPLE_COUNT; ++i)
    {
        Length d_i = Number(i) * dx;
        // Distance between the current sample point and the planet center.
        Length r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);
        // Number density at the current sample point (divided by the number density
        // at the bottom of the atmosphere, yielding a dimensionless number).
        Number y_i = exp(-(r_i - atmosphere.bottom_radius) / scale_height);
        // Sample weight (from the trapezoidal rule).
        Number weight_i = i == 0 || i == SAMPLE_COUNT ? 0.5 : 1.0;
        result += y_i * weight_i * dx;
    }
    return result;
}

DimensionlessSpectrum ComputeTransmittanceToTopAtmosphereBoundary(
    in AtmosphereParameters atmosphere, Length r, Number mu)
{
  //assert(r >= atmosphere.bottom_radius && r <= atmosphere.top_radius);
  //assert(mu >= -1.0 && mu <= 1.0);
    return exp(-(
      atmosphere.rayleigh_scattering *
          ComputeOpticalLengthToTopAtmosphereBoundary(
              atmosphere, atmosphere.rayleigh_scale_height, r, mu) +
      atmosphere.mie_extinction *
          ComputeOpticalLengthToTopAtmosphereBoundary(
              atmosphere, atmosphere.mie_scale_height, r, mu)));
}


DimensionlessSpectrum ComputeTransmittanceToTopAtmosphereBoundaryTexture(
    in AtmosphereParameters atmosphere, in float2 uv_coord)
{
    Length r;
    Number mu;
    GetRMuFromTransmittanceTextureUv(atmosphere, uv_coord, r, mu);
    return ComputeTransmittanceToTopAtmosphereBoundary(atmosphere, r, mu);
}

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float2 DirectXUVToOpenGLUV(in float2 dxuv)
{
    // For texture spaces, in Direct3D (0, 0) is top-left, in OpenGL (0, 0) is bottom-left. 
    // Therefore the v-coordinate will be upside down in one of these APIs.
    return float2(dxuv.x, 1.0 - dxuv.y);
}

float4 main(PixelInputType input) : SV_TARGET
{
    float2 uv = input.tex;
    float4 frag_color = float4(ComputeTransmittanceToTopAtmosphereBoundaryTexture(ATMOSPHERE, uv), 1.0);
    return frag_color;
}