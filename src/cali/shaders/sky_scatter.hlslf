// ----------------------------------------------------------------------------
// Rayleigh and Mie scattering atmosphere system
//
// implementation of the techniques described here:
// http://www.scratchapixel.com/old/lessons/3d-advanced-lessons/simulating-the-colors-of-the-sky/atmospheric-scattering/
// ----------------------------------------------------------------------------

#include "cali_common.fx"

#define PI 3.14159265359

struct ray_t {
	float3 origin;
	float3 direction;
};
#define BIAS 1e-4 // small offset to avoid self-intersections

struct sphere_t {
	float3 origin;
	float radius;
	int material;
};

struct plane_t {
	float3 direction;
	float distance;
	int material;
};

bool isect_sphere(ray_t ray, sphere_t sphere, inout float t0, inout float t1)
{
	float3 rc = sphere.origin - ray.origin;
	float radius2 = sphere.radius * sphere.radius;
	float tca = dot(rc, ray.direction);
	float d2 = dot(rc, rc) - tca * tca;
	if (d2 > radius2) return false;
	float thc = sqrt(radius2 - d2);
	t0 = tca - thc;
	t1 = tca + thc;

	return true;
}

// scattering coefficients at sea level (m)
static const float3 betaR = float3(5.5e-6, 13.0e-6, 22.4e-6); // Rayleigh 
static const float3 betaM = float3(21e-6, 21e-6, 21e-6); // Mie

// scale height (m)
// thickness of the atmosphere if its density were uniform
static const float hR = 7994.0; // Rayleigh
static const float hM = 1200.0; // Mie

float rayleigh_phase_func(float mu)
{
	return
			3. * (1. + mu*mu)
	/ //------------------------
				(16. * PI);
}

// Henyey-Greenstein phase function factor [-1, 1]
// represents the average cosine of the scattered directions
// 0 is isotropic scattering
// > 1 is forward scattering, < 1 is backwards
static const float g = 0.76;
float henyey_greenstein_phase_func(float mu)
{
	return
						(1. - g*g)
	/ //---------------------------------------------
		((4. + PI) * pow(1. + g*g - 2.*g*mu, 1.5));
}

// Schlick Phase Function factor
// Pharr and  Humphreys [2004] equivalence to g above
static const float k = 1.55*g - 0.55 * (g*g*g);
float schlick_phase_func(float mu)
{
	return
					(1. - k*k)
	/ //-------------------------------------------
		(4. * PI * (1. + k*mu) * (1. + k*mu));
}

static const float earth_radius = 6360e3; // (m)
static const float atmosphere_radius = 6420e3; // (m)

static float3 sun_dir = float3(0, 1, 0);
static const float sun_power = 20.0;

static const sphere_t atmosphere = { float3(0, 0, 0), atmosphere_radius, 0 };

static const int num_samples = 16;
static const int num_samples_light = 8;

bool get_sun_light(
	ray_t ray,
	inout float optical_depthR,
	inout float optical_depthM)
{
	float t0, t1;
	isect_sphere(ray, atmosphere, t0, t1);

	float march_pos = 0.;
	float march_step = t1 / float(num_samples_light);

	for (int i = 0; i < num_samples_light; i++) 
    {
		float3 s = ray.origin +	ray.direction * (march_pos + 0.5 * march_step);
		float height = length(s) - earth_radius;
		if (height < 0.)
			return false;

		optical_depthR += exp(-height / hR) * march_step;
		optical_depthM += exp(-height / hM) * march_step;

		march_pos += march_step;
	}

	return true;
}

float3 get_incident_light(ray_t ray)
{
	// "pierce" the atmosphere with the viewing ray
	float t0, t1;
	if (!isect_sphere(ray, atmosphere, t0, t1)) 
    {
		return float3(0.0, 0.0, 0.0);
	}

	float march_step = t1 / float(num_samples);

	// cosine of angle between view and light directions
	float mu = dot(ray.direction, sun_dir);

	// Rayleigh and Mie phase functions
	// A black box indicating how light is interacting with the material
	// Similar to BRDF except
	// * it usually considers a single angle
	//   (the phase angle between 2 directions)
	// * integrates to 1 over the entire sphere of directions
	float phaseR = rayleigh_phase_func(mu);
	float phaseM =
#if 0
		henyey_greenstein_phase_func(mu);
#else
		schlick_phase_func(-mu);
#endif

	// optical depth (or "average density")
	// represents the accumulated extinction coefficients
	// along the path, multiplied by the length of that path
	float optical_depthR = 0.;
	float optical_depthM = 0.;

	float3 sumR = float3(0.0, 0.0, 0.0);
    float3 sumM = float3(0.0, 0.0, 0.0);
	float march_pos = 0.;

	for (int i = 0; i < num_samples; i++) 
    {
		float3 s = ray.origin +	ray.direction * (march_pos + 0.5 * march_step);
		float height = length(s) - earth_radius;

		// integrate the height scale
		float hr = exp(-height / hR) * march_step;
		float hm = exp(-height / hM) * march_step;
		optical_depthR += hr;
		optical_depthM += hm;

		// gather the sunlight
        ray_t light_ray = { s, sun_dir };

		float optical_depth_lightR = 0.;
		float optical_depth_lightM = 0.;
		bool overground = get_sun_light(light_ray, optical_depth_lightR, optical_depth_lightM);

		if (overground) 
        {
			float3 tau = betaR * (optical_depthR + optical_depth_lightR) +
				betaM * 1.1 * (optical_depthM + optical_depth_lightM);
			float3 attenuation = exp(-tau);

			sumR += hr * attenuation;
			sumM += hm * attenuation;
		}

		march_pos += march_step;
	}

	return sun_power * (sumR * phaseR * betaR + 0.3 * sumM * phaseM * betaM);
}

float4 ps_sky(VS_OUTPUT input) : SV_TARGET
{
    sun_dir = normalize(sun_position - camera_position);
    ray_t ray = { float3(0.f, earth_radius + camera_position.y, 0.f), normalize(input.worldPos - camera_position) };
    float3 col = get_incident_light(ray);
    return float4(col.r, col.g, col.b, 1.0);
}

/*
void mainImage(_out(vec4) fragColor, vec2 fragCoord)
{
	vec2 aspect_ratio = vec2(u_res.x / u_res.y, 1);
	float fov = tan(radians(45.0));
	vec2 point_ndc = fragCoord.xy / u_res.xy;
	float3 point_cam = float3((2.0 * point_ndc - 1.0) * aspect_ratio * fov, -1.0);

	float3 col = float3(0);

	// sun
	mat3 rot = rotate_around_x(-abs(sin(u_time / 2.)) * 90.);
	sun_dir *= rot;

    if (u_mouse.z < 0.1) {
        // sky dome angles
        float3 p = point_cam;
        float z2 = p.x * p.x + p.y * p.y;
        float phi = atan(p.y, p.x);
        float theta = acos(1.0 - z2);
        float3 dir = float3(
            sin(theta) * cos(phi),
            cos(theta),
            sin(theta) * sin(phi));

        ray_t ray = _begin(ray_t)
            float3(0, earth_radius + 1., 0),
            dir
        _end;

        col = get_incident_light(ray);
    } else {
        float3 eye = float3 (0, earth_radius + 1., 0);
        float3 look_at = float3 (0, earth_radius + 1.5, -1);

        ray_t ray = get_primary_ray(point_cam, eye, look_at);

        if (dot(ray.direction, float3(0, 1, 0)) > .0) {
            col = get_incident_light(ray);
        } else {
            col = float3 (0.333);
        }
    }

	fragColor = vec4(col, 1);
}
*/