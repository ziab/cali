#include "cali_common.fx"

/////////////////////////////////////////////////////////////
// Type Definitions
/////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
// Local functions
/////////////////////////////////////////////////////////////

float3 get_noramal_from_tex(Texture2D tex, SamplerState samp, float2 uv)
{
    float texel_size = 0.001;
    float h1 = tex.SampleLevel(samp, uv, 0);
    float h2 = tex.SampleLevel(samp, uv + float2(texel_size, 0.0), 0);
    float h3 = tex.SampleLevel(samp, uv + float2(texel_size, texel_size), 0);

    float3 v1 = float3(uv.x, h1, uv.y);
    float3 v2 = float3(uv.x + texel_size, h2, uv.y);
    float3 v3 = float3(uv.x + texel_size, h3, uv.y + texel_size);

    float3 normal = cross(normalize(v3 - v1), normalize(v2 - v1));

    return normal;
}

/////////////////////////////////////////////////////////////
// Global Resources
/////////////////////////////////////////////////////////////

float4x4 IvModelViewProjectionMatrix;
float4x4 IvNormalMatrix;
float4x4 modelMatrix;

Texture2D height_map;
SamplerState height_mapSampler;

float grid_stride;
float grid_cols;
float grid_rows;
float3 grid_camera_offset;
float3 grid_uv_quad_size;

/////////////////////////////////////////////////////////////
// Main
/////////////////////////////////////////////////////////////

float2 get_texture_size(Texture2D _texture)
{
    uint tex_width, tex_height;
    _texture.GetDimensions(tex_width, tex_height);
    return float2(tex_width, tex_height);
}

VS_OUTPUT main(float2 uv : TEXCOORD, float3 normal : NORMAL, float4 pos : POSITION)
{
    VS_OUTPUT output;

    float2 texture_size = get_texture_size(height_map);
    float2 grid_quad_size = float2(grid_uv_quad_size.x, grid_uv_quad_size.y);
    float2 grid_size = float2(grid_cols, grid_rows);

    float2 grid_center = floor(
        float2(
            camera_position.x + grid_camera_offset.x,
            camera_position.z + grid_camera_offset.z)
        / grid_stride) * grid_stride;

    float2 grid_center_uv = grid_center / (grid_size * grid_stride);

    float2 translated_uv = (grid_center_uv + uv) * grid_quad_size;

    // loop the texture
    translated_uv = frac(abs(translated_uv));

    float4 position = pos;
    position.y = sqrt(height_map.SampleLevel(height_mapSampler, translated_uv, 0).r) * 255.0 * 0.65;

    output.position = mul(IvModelViewProjectionMatrix, position);
    output.worldPos = (float3) (mul(modelMatrix, position));
    output.normal = (float3) (mul(IvNormalMatrix, float4(get_noramal_from_tex(height_map, height_mapSampler, translated_uv), 0)));
    return output;
}
