// ----------------------------------------------------------------------------
// Rayleigh and Mie scattering atmosphere system
// ----------------------------------------------------------------------------

#include "cali_common.fx"
#include "bruneton_main.fx"

static const float kBottomRadius = 6360000.0;
static const float kLengthUnitInMeters = 1000.0;

static const float kPi = 3.1415926;
static const float kSunAngularRadius = 0.00935 / 2.0;
static const float kSunSolidAngle = kPi * kSunAngularRadius * kSunAngularRadius;
static const float3 kGroundAlbedo = float3(0.0, 0.0, 0.04);

static const float kSolarIrradiance[3] =
{
    1.11776, 1.14259, 1.01249
};

static const float3 sun_radiance = float3(
    kSolarIrradiance[0] / kSunSolidAngle,
    kSolarIrradiance[1] / kSunSolidAngle,
    kSolarIrradiance[2] / kSunSolidAngle);

float4 ps_sky(VS_OUTPUT input) : SV_TARGET
{
    ////////////////////////////////////////////////////////////////////////////
    const float3 white_point = float3(1.0, 1.0, 1.0);
    const float3 earth_center = float3(0.0, -kBottomRadius / kLengthUnitInMeters, 0.0);
    const float exposure = 10.0;
    const float shadow_length = 0.0;
    ////////////////////////////////////////////////////////////////////////////

    // we render in camera space, all vertex coordinates are relative to the camera 
    float3 view_ray = input.world_position;
    float3 view_direction = normalize(view_ray);
    float3 sun_direction = normalize(sun_position - camera_position);

    // Hack to fade out light shafts when the Sun is very close to the horizon.
    float lightshaft_fadein_hack = smoothstep(0.02, 0.04, dot(normalize(camera_position - earth_center), sun_direction));

    // Hack: camer_position to kilometers adjustment
    float3 camera_position_km_uints = camera_position / (kLengthUnitInMeters / 100.0);

    float3 transmittance;
    float3 radiance = GetSkyRadiance(
        camera_position_km_uints - earth_center,
        view_direction,
        shadow_length,
        sun_direction,
        transmittance);

    float vs_dot = dot(view_direction, sun_direction);

    if (vs_dot > 0.999975)
    {
        radiance = radiance + transmittance * sun_radiance;
    }

    float3 color = pow(
        abs(float3(1.0, 1.0, 1.0) - exp(-radiance / white_point * exposure)),
        float3(1.0 / 2.2, 1.0 / 2.2, 1.0 / 2.2));

    float brightness = 0.2126 * color.r + .7152 * color.g + .0722 * color.b;

    return float4(color.rgb, brightness);
}